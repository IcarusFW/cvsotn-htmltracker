// - - - - - vertical rhythm calculator and mixin - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

// vertical rhythm calculator based on the layout and calculations at http://lamb.cc/typograph
// for use with type-based layouts, use Typograph to create your scale for use with this mixin
//
// usage:
// use rhythm() mixin with predefined typographic scale in config.scss for quick layout
// use rhythm-calc() only if you know what you're doing
//
// $target = target font-size (with no units)
// $bounds = target margin/padding ratio at max 1.0

@function rhythm-calc($target, $bounds: 1) {
	$tmp-lh: $target * $lineheight-factor * 1px;
	$rhythm-factor: ceil(($tmp-lh * 3) / $lineheight) / 1px;
	$rhythm-px: $lineheight * $rhythm-factor * 1px;
	$tmp-padding: (($rhythm-px - $tmp-lh) * .5) / 1px;
	@return (($tmp-padding / $target) * $bounds) * 1em;
}

@mixin rhythm($target) {
	font-size: em($target);
	padding: rhythm-calc($target) 0;
	margin: 0;
}

// - - - - - typographic mixins - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

// predefined mixins for use in your stylesheets to automatically add predefined font stacks
//
// usage:
// 1) set the $family variables in base/_config.scss
// 2) uncomment the @font-face includes at the bottom of common.scss
// 3) @include whichever font stack you require in the declaration of choice

@mixin font-light {
	font-family: $family-light, $lucida-grande;
}

@mixin font-normal {
	font-family: $family-reg, $lucida-grande;
}

@mixin font-italic {
	font-family: $family-italic, $lucida-grande;
}

@mixin font-bold {
	font-family: $family-bold, $lucida-grande;
}

@mixin font-mono {
	font-family: $family-mono, $monospace;
}

// add or remove hyphenation to your declaration as required
//
// usage: default mixin value is setting (auto) hyphenation on
// other available values: (manual) (off)

@mixin css-hyphens($val: auto) {
	-webkit-hyphens : $val;
	-moz-hyphens : $val;
	-ms-hyphens : $val;
	-o-hyphens : $val;
	hyphens : $val;
}

// create small caps for extra typographic style and emphasis
//
// usage: set $color and $font-weight to whatever is desired for your smallcaps

@mixin smallcaps($color, $font-weight) {
	font-variant : small-caps;
	font-weight : $font-weight;
	text-transform : lowercase;
	color : $color;
}

// automatically add ellipses if text overflows its element
//
// usage: @include on the container where text-over control is required

@mixin text-overflow {
	overflow : hidden;
	text-overflow : ellipsis;
	white-space : nowrap;
}

// - - - - - stretching mixins - http://compass-style.org/reference/compass/layout/stretching - - - - - - - - - - - - //

// these mixins allow you to stretch a container to specific sizes using absolute positioning with ease
// three variations of stretching are included: x-axis, y-axis, full control
//
// usage:
// @include the mixin of choice, and pass any values to it as required
// by default, the mixin will zero each offset to the very outer edge of the viewport
// eg: including stretch() without values will make the container fill the viewport

@mixin stretch($offset-top: 0, $offset-right: 0, $offset-bottom: 0, $offset-left: 0) {
	position: absolute;
	@if $offset-top {
		top: $offset-top;
	}
	@if $offset-bottom {
		bottom: $offset-bottom;
	}
	@if $offset-left {
		left: $offset-left;
	}
	@if $offset-right {
		right: $offset-right;
	}
}

@mixin stretch-x($offset-left: 0, $offset-right: 0) {
	@include stretch(false, $offset-right, false, $offset-left);
}

@mixin stretch-y($offset-top: 0, $offset-bottom: 0) {
	@include stretch($offset-top, false, $offset-bottom, false);
}

@mixin stretch-all($offset: 0) {
	@include stretch($offset, $offset, $offset, $offset);
}

// - - - - - - element zeroing: http://github.com/malarkey/Rock-Hammer - - - - - - //

@mixin zero {
	margin: 0;
	padding: 0;
}

// - - - - - - translucent black/white: http://sachagrief.com/useful-sass-mixins/ - - - - - - //

@function black($opacity) {
	@return rgba(0,0,0,$opacity)
}

@function white($opacity) {
	@return rgba(255,255,255,$opacity)
}

// - - - - - - emboss/letterpress: http://sachagrief.com/useful-sass-mixins/ - - - - - - //

@mixin box-emboss($opacity1, $opacity2) {
	box-shadow: white($opacity1) 0 1px 0, inset black($opacity2) 0 1px 0;
}

@mixin inverted-box-emboss($opacity1, $opacity2) {
	box-shadow: black($opacity1) 0 1px 0, inset white($opacity2) 0 1px 0;
}

@mixin letterpress($opacity: 0.8, $x: 0, $y: 1px, $blur: 0) {
	text-shadow: white($opacity) $x $y $blur;
}

@mixin inverted-letterpress($opacity: 0.8, $x: 0, $y: 1px, $blur: 0) {
	text-shadow: black($opacity) $x $y $blur;
}

// - - - - - - - - - - hidden elements: http://github.com/malarkey/Rock-Hammer - - - - - - - - - - //

// mixin to completely hide an element from everything including screenreaders

@mixin hidden {
	display : none !important;
	visibility : hidden;
}

// mixin to hide an element from viewports but not screenreaders, retaining accessibility
// also includes a focus declaration to allow screenreaders to target the element using the keyboard

@mixin visuallyhidden {
	overflow : hidden;
	position : absolute;
	clip : rect(0 0 0 0);
	height : 1px;
	width : 1px;
	margin : -1px;
	padding : 0;
	border : 0;

	&.focusable {

		&:active,
		&:focus {
			position : static;
			clip : auto;
			height : auto;
			width : auto;
			margin : 0;
			overflow: visible;
		}
	}
}

// hides the element but retains its dimensions within the document flow

@mixin invisible {
	visibility : hidden;
}

// - - - - - - text-hide: http://sachagrief.com/useful-sass-mixins/
// - - - - - - http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement - - - - - //

// @mixin ir {
// 	overflow: hidden;
// 	white-space: nowrap;
// 	text-indent: 101%;
// 	display: inline-block;
// 	color: transparent !important;
// }

// - - - - - - variation, HTML5BP: https://github.com/h5bp/html5-boilerplate/issues/1005 - - - - - //

//@mixin ir {
//    font: 0/0 serif;
//    text-shadow: none;
//    color: transparent;
//}

// - - - - - - second variation, HTML5BP: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757c9e03dda4e463fb0d4db5a5f82d7 - - - - - //

@mixin ir {
	border: 0;
	font: 0/0 a;
	text-shadow: none;
	color: transparent;
	background-color: transparent; 
}

// - - - - - - - - - - shading and opacity: http://github.com/malarkey/Rock-Hammer - - - - - - - - - - //

// @include box-shadow(HORIZONTAL VERTICAL BLUR SPREAD COLOR);

@mixin box-shadow($shadow: 0 1px 3px 0 rgba(0,0,0,.25)) {
	-webkit-box-shadow : $shadow;
	-moz-box-shadow : $shadow;
	box-shadow : $shadow;
}

// @include inset-shadow(HORIZONTAL VERTICAL BLUR SPREAD COLOR);

@mixin inset-shadow($shadow: 0 1px 3px rgba(0,0,0,.25)) {
	-webkit-box-shadow : inset $shadow;
	-moz-box-shadow : inset $shadow;
	box-shadow : inset $shadow;
}

// .drop-shadow(HORIZONTAL, VERTICAL, BLUR, ALPHA);

@mixin drop-shadow($x-axis: 0, $y-axis: 1px, $blur: 2px, $alpha: 0.1) {
	-webkit-box-shadow : $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
	-moz-box-shadow : $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
	box-shadow : $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
}

// @include opacity(VALUE, IE8 SWITCH);

@mixin opacity($opacity : .5, $ie8-opacity-supported: true) {
	filter: alpha(opacity=($opacity * 100));
	-khtml-opacity: $opacity;
	-webkit-opacity : $opacity;
	-moz-opacity : $opacity;
	opacity : $opacity;
	@if ($ie8-opacity-supported == true) {
		-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity * 100})";
	}
}

// - - - - - - - - - - CSS3 transforms: http://github.com/malarkey/Rock-Hammer - - - - - - - - - - //

// .rotate(VALUEdeg);

@mixin rotate($deg) {
	-webkit-transform : rotate($deg);
	-moz-transform : rotate($deg);
	-ms-transform : rotate($deg);
	-o-transform : rotate($deg);
	transform : rotate($deg);
}

// .scale(VALUE);

@mixin scale($ratio) {
	-webkit-transform : scale($ratio);
	-moz-transform : scale($ratio);
	-ms-transform : scale($ratio);
	-o-transform : scale($ratio);
	transform : scale($ratio);
}

// .skew(VALUE, VALUE);

@mixin skew($x: 0, $y: 0) {
	-webkit-transform : skew($x, $y);
	-moz-transform : skew($x, $y);
	-ms-transform : skew($x, $y);
	-o-transform : skew($x, $y);
	transform : skew($x, $y);
}

// .translate(VALUE, VALUE)

@mixin translate($x: 0, $y: 0) {
	-webkit-transform : translate($x, $y);
	-moz-transform : translate($x, $y);
	-ms-transform : translate($x, $y);
	-o-transform : translate($x, $y);
	transform : translate($x, $y);
}

@mixin translate3d($x: 0, $y: 0, $z: 0) {
	-webkit-transform : translate($x, $y, $z);
	-moz-transform : translate($x, $y, $z);
	-ms-transform : translate($x, $y, $z);
	-o-transform : translate($x, $y, $z);
	transform : translate($x, $y, $z);
}

// - - - - - - - - - - CSS3 background controls: http://github.com/malarkey/Rock-Hammer - - - - - - - - - - //

// .background-size(VALUE VALUE);

@mixin background-size($size){
	-webkit-background-size : $size;
	-moz-background-size : $size;
	-o-background-size : $size;
	background-size : $size;
}

// .background-clip(VALUE); (border-box, padding-box, content-box)

@mixin background-clip($clip) {
	-webkit-background-clip : $clip;
	-moz-background-clip : $clip;
	background-clip : $clip;
}

// - - - - - - - - - - clearfix extension: http://web-design-weekly.com/2013/05/12/handy-sass-mixins/ - - - - - - - - - - //

// usage:
// add '@extend clearfix' to any declaration that requires it
// this differs from the Bourbon '@include clearfix' in that it retains IE7 compatibility with 'zoom: 1' and the :before pseudo

%clearfix {
	*zoom: 1;
	&:before, &:after {
		content: "";
		display: table;
	}
	&:after {
		clear: both;
	}
}

// - - - - - - - - - - box-sizing - - - - - - - - - - //

@mixin box-sizing {
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}

// - - - - - - - - - - unit removal: // http://stackoverflow.com/questions/6927007/how-do-you-remove-units-of-measurement-from-a-sass-mixin-equation - - - - - - - - - - //

// usage:
// use this to remove the units from a particular value, useful for conversion into something else

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// - - - - - - - - - - responsive mixins - - - - - - - - - - //

// combination of z-index property map gist: http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32
// and sass-bsed IE mixins: http://jakearchibald.github.io/sass-ie/
//
// widths:
// mobile-skinny: 20em / 320px
// mobile-wide: 30em / 480px
// tablet: 45em / 720px
// desktop: 60em / 960px
// superwide: 75em / 1200px

$fix-mqs: false !default; 		// set for maximum media query width to use
$old-ie: false !default; 		// set to incopropate all IE-based hacks

// $breakpoints: (
//   default: (
//     mobile-skinny: 20em,
//     mobile-wide: 30em,
//     tablet: 45em,
//     desktop: 60em,
//     superwide: 68em,
//     maximum: 75em
//   )
// );

$breakpoints: (
  default: (
    mobile-skinny: ($mobile-skinny, 20em),
    mobile-wide: ($mobile-wide, 30em),
    tablet: ($tablet, 45em),
    desktop: ($desktop, 60em),
    superwide: ($superwide, 68em),
    maximum: ($maximum, 75em)
  )
);

@mixin respond-to($width, $type: default, $array: $breakpoints) {
  @if map-has-key($breakpoints, $type) {
    @if map-has-key(map-get($breakpoints, $type), $width) {
    	$obj: map-get(map-get($breakpoints, $type), $width);
      @if $fix-mqs {
        @if $fix-mqs >= nth($obj, 2) {
          @content;
        }
      } @else {
        // @media screen and (min-width: map-get(map-get($breakpoints, $type), $width)) { 		// Custom media queries declaration
        // @include media(min-width map-get(map-get($breakpoints, $type), $width)) { 			// uses Bourbon Neat's @include
        @include media(nth($obj, 1)) { 															// uses Bourbon Neat's @include and new-breakpoint()
          @content;
        }
      }
    } @else {
      @warn 'There is no element "#{$name}" in the widths map.'
    }
  } @else {
    @warn 'The desired type "#{$type}" is not available, please add it to the map or specify another.'
  }
}

@mixin old-ie {
	@if $old-ie {
		@content;
	}
}

// ------------------ z-index ------------------ //

// Mixin: z
// Get the associated Z-Index from the Map
// 
// @variable:
//    $name [string]
//      -> The Name from the ZIndex 'element'
//    $type [string]
//      -> The Element Type (default: default)
//    $z [map]
//      -> The associated data-map (default: $z-map)
// ------
//
// @usage:
//     .block {
//        @include z(modals);
//     }
// @result:
//    .block {
//      z-index: 40;
//    }
//
// http://sassmeister.com/gist/29202828a1c37714f5e1
//**

$z-map: (
  default: (
  	backgrounds: -1,
  	zero: 0,
    columns-side: 1,
    columns-main: 2,
    footer: 1,
    grid: 4, 
    tooltip: 5,
    confirmation: 6, 
    index-block: 7,
    navigation: 10, 
    modals: 20
  ),
  lightbox: (
    fields: 1, 
    form-controls: 2, 
    errors: 3, 
    autocomplete-dropdown: 4
  )
);

@mixin z($name, $type: default, $z: $z-map) {
  // Check if 'type' is available 
  @if map-has-key($z, $type) {

    // Check if 'name' is available
    @if map-has-key(map-get($z,$type), $name) {
      z-index: map-get(map-get($z,$type), $name);
    } @else {
      @warn 'There is not elements "#{$name}" in the z map available.';
    }
  } @else {
     @warn 'The desired Type "#{$type}" is not available. Please add it to the Map or use another one'
  }
}

// - - - - - - - - - - inline-block, Bourbon mixin recently deprecated, IE7+ support - - - - - - - - - - //

@mixin inlineblock {
	display: inline-block;
	vertical-align: baseline;
	
	@include old-ie {
		zoom: 1;
		*display: inline;
		*vertical-align: auto;
	}
}

// - - - - - - - - - - inline-block fix: http://css-tricks.com/fighting-the-space-between-inline-block-elements - - - - - - - - //
// - - - - - - - - - - alternative fix used to allow for em font-sizing - - - - - - - - - - //

@mixin inlineblock-parent {
	letter-spacing: -0.29em; 				// webkit: collapse whitespace between units (-0.31em)
	text-rendering: optimizespeed; 			// webkit: fixes text-rendering: optimizeLegibility
	
	@include old-ie {
		*letter-spacing: normal; 			// reset IE < 8
		*word-spacing: -0.43em; 			// IE < 8: collapse whitespace between units	
	}
}

@mixin inlineblock-child {
	// inline-block fix: http://css-tricks.com/fighting-the-space-between-inline-block-elements
	// alternative fix used to allow for em font-sizing
	display: inline-block;
	letter-spacing: normal;
	word-spacing: normal;
	text-rendering: auto;
	vertical-align: top;
	
	@include old-ie {
		zoom: 1;
		*display: inline; 					// IE < 8: fake inline-block;
	}
}
